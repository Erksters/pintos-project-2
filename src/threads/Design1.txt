
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Erick Saenz-Gardea erksters@ksu.edu
Jason Byrne jjbyrne@ksu.edu
Austin Hess ahess@ksu.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.

Inspiration came from this repository: https://github.com/kinux98/pintos-project-1 and https://github.com/ChristianJHughes/pintos-project1

https://jeason.gitbooks.io/pintos-reference-guide-sysu/content/Debugging-tools-guide.html


		 ALARM CLOCK
     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* timer.c */
struct sleeping_thread - A struct defined so that the sleep_list could be populated and so that we can define a thread that is sleeping. 
    It also provides the sleeping threads with a timer of how long it is asleep.
static struct list sleep_list - A list that is used to define which threads are blocked.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

It starts by allocating the pages that contain zeros (empty space) to the sleeping thread and then asserting that it's not null.
   It then gets the timer ticks needed to sleep the thread. From there it creates another struct thread for the current thread 
       and checks to make sure that the current thread's interrupt level is currently on. Then it calculates the timer ticks needed and 
           adds the thread to the list in order (so that you only need to check the head of the list instead of iterating through it all every
               time). Finally, it blocks the created thread so that it does not fire off while other threads are currently running.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

It minimizes the amount of time spent in the timer interrupt handler because it only checks the head, or the first element, of 
    the list every time and if it does not match the condition of the current ticks being the same as the sleeping ticks, it 
        breaks the loop and continues. The only case where you would be making more than one check-in on the list would be if
            a thread was just removed from the list. This is an improvement because we are not wasting time looping through the entire list.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Race conditions are avoided because we set the interrupt level to off, which means the process becomes atomic. Therefore, 
    handling the problem since the operations would be handled separately.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

The timer_sleep function disables the interrupt level, making it impossible to be interrupted during execution. Therefore, race conditions are prevented.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

We chose this design because it improved the overall running time of the process. Other designs that were considered had the program
    iterating through the entire list of threads every single time timer_interrupt was called, which in the long run would bog the system down.
       This design makes it so every call to timer_interrupt only checks the head of the list or the element with the shortest wake-up time and then breaks out.


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct semaphore_elem - A data structure to run threads based on priority
struct semaphore - A data structure with access to the waiting threads and a priority value

/* List. A shortcut to see the head or tail of a doubly linked list */
struct list   {
    struct list_elem head;      /* List head. */
    struct list_elem tail;      /* List tail. */
  };

/* List element. A doubly linked list with a head and a tail somewhere. See List above*/
struct list_elem   {
    struct list_elem *prev;     /* Previous list element. */
    struct list_elem *next;     /* Next list element. */
  };

/*A data structure to keep access to shared data temporarily exclusive */
struct donated_lock  {
    struct lock *lock;
    struct thread *thread_donated;
    struct list_elem elem;
  };  

>> B2: Explain the data structure used to track priority donation.
    Locks are used for methods of synchronization. They help prevent multiple threads from accessing a resource at the same time.
    Our donated_lock data structure will be moved to many threads if necessary. This is done via methods
     lock_acquire() and lock_release() and they are compared to other locks in the threads list of donated_locks.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

For threads: We have a list of sleeping threads called sleep_list in timer.c in ascending order by comparing a 
    threads (struct sleeping_threads)-> sleep_ticks value which is checked periodically.

For Semaphore: Locks have a semaphore attribute. Semaphore have values of priority. If one semaphore value 
    is less than another semaphore, then the one with the smaller value will run first. 

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

lock_acquire firsts asserts and makes sure that the lock is not null, that there are no external interrupts,
     and that the current thread is not being held by a lock already. It then checks to make sure that the thread 
         holding the lock exists. Next it checks whether or not the priority of the thread holding the lock is
             less than the actual priority. From there it creates a donated lock and inserts it into the list.
                 Nested donations are handled because the thread struct has a “donated_locks” member which is a list of
                     donations for that particular thread, which is then passed into the list insertion method 
                         and it will loop through each of the donations.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

When a thread has a lock and tries to release it, the thread checks to see if a priority donation had been received by
   another thread. If it had received a priority donation, then its removed from both it's list of priority donations 
       is removed and the higher priority donations' list of recipients. Then the lock is released and the thread 
          with the highest priority can now acquire it

 ---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

A potential race condition would be if we write the priority for a thread at the same time a potential interrupt does,
    meaning we wouldn’t know which priority was set for the thread. This is fixed by sleeping the thread so that
        the interrupt does not set the priority. As for a lock, it cannot be used because interrupt handlers are 
            unable to use locks.


---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Being able to quantify priority via integer values and doubly linked list is an easy way to
    optimize the search for the next smallest value if they links are sorted in ascending/descending order.
        Inserting items into this type of list will be slower than other designs. The Inspiration for this design
             came from an online resource we found. While we saw other examples online, they would only pass 6 out 
                 of the 28 tests. As far as we could tell, the other repos attempted to create a similar scheduling environments 
                     so there weren't any major differences when considering superiority.
  
